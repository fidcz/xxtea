import re 
import ctypes 
def int_overflow (O0OOOOO00O0O0O0OO ):
    OO0O00OOOOOO00O0O =2147483647 
    if not -OO0O00OOOOOO00O0O -1 <=O0OOOOO00O0O0O0OO <=OO0O00OOOOOO00O0O :
        O0OOOOO00O0O0O0OO =(O0OOOOO00O0O0O0OO +(OO0O00OOOOOO00O0O +1 ))%(2 *(OO0O00OOOOOO00O0O +1 ))-OO0O00OOOOOO00O0O -1 
    return O0OOOOO00O0O0O0OO 
def unsigned_right_shitf (O0OO0O00000O00OO0 ,OOO00OO000OO0OOO0 ):
    if O0OO0O00000O00OO0 <0 :
        O0OO0O00000O00OO0 =ctypes .c_uint32 (O0OO0O00000O00OO0 ).value 
    if OOO00OO000OO0OOO0 <0 :
        return -int_overflow (O0OO0O00000O00OO0 <<abs (OOO00OO000OO0OOO0 ))
    return int_overflow (O0OO0O00000O00OO0 >>OOO00OO000OO0OOO0 )
def fromCharCode (O00OOOOO00O00000O ,*O00000OO0OOO0OOO0 ):
    return chr (O00OOOOO00O00000O %65536 )+''.join ([chr (O00OOO0OOO0OO00OO %65536 )for O00OOO0OOO0OO00OO in O00000OO0OOO0OOO0 ])
def btoa (O0O00OOO00O0O00OO ):
    OOO0OOOO0O0O000O0 ='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
    O00OO000000000O00 =OO000O0O0000O00O0 =0 
    OOO000OOOO0OOOO0O =len (O0O00OOO00O0O00OO )
    O00OO0000000OOO00 =OOO000OOOO0OOOO0O %3 
    OOO000OOOO0OOOO0O =OOO000OOOO0OOOO0O -O00OO0000000OOO00 
    O000O000O00OOOOOO =int_overflow (int (OOO000OOOO0OOOO0O /3 )<<2 )
    if O00OO0000000OOO00 >0 :
        O000O000O00OOOOOO +=4 
    OO0O0000OO0O00O00 =['']*O000O000O00OOOOOO 
    while O00OO000000000O00 <OOO000OOOO0OOOO0O :
        OO0OOOO00OO000O00 =int_overflow (ord (O0O00OOO00O0O00OO [O00OO000000000O00 ])<<16 )
        O00OO000000000O00 +=1 
        OO0000OOOO0OOOO0O =int_overflow (ord (O0O00OOO00O0O00OO [O00OO000000000O00 ])<<8 )
        O00OO000000000O00 +=1 
        O00O00OO00OOO00O0 =ord (O0O00OOO00O0O00OO [O00OO000000000O00 ])
        O00OO000000000O00 +=1 
        O0OO0OOO0OO0O00OO =OO0OOOO00OO000O00 |OO0000OOOO0OOOO0O |O00O00OO00OOO00O0 
        OO0O0000OO0O00O00 [OO000O0O0000O00O0 ]=OOO0OOOO0O0O000O0 [O0OO0OOO0OO0O00OO >>18 ]+OOO0OOOO0O0O000O0 [O0OO0OOO0OO0O00OO >>12 &0x3f ]+OOO0OOOO0O0O000O0 [O0OO0OOO0OO0O00OO >>6 &0x3f ]+OOO0OOOO0O0O000O0 [O0OO0OOO0OO0O00OO &0x3f ]
        OO000O0O0000O00O0 +=1 
    if O00OO0000000OOO00 ==1 :
        O0OO0OOO0OO0O00OO =ord (O0O00OOO00O0O00OO [O00OO000000000O00 ])
        O00OO000000000O00 +=1 
        OO0O0000OO0O00O00 [OO000O0O0000O00O0 ]=OOO0OOOO0O0O000O0 [O0OO0OOO0OO0O00OO >>2 ]+OOO0OOOO0O0O000O0 [int_overflow ((O0OO0OOO0OO0O00OO &0x03 )<<4 )]+'=='
        OO000O0O0000O00O0 +=1 
    elif O00OO0000000OOO00 ==2 :
        OO0OOOO00OO000O00 =int_overflow (ord (O0O00OOO00O0O00OO [O00OO000000000O00 ])<<8 )
        O00OO000000000O00 +=1 
        OO0000OOOO0OOOO0O =ord (O0O00OOO00O0O00OO [O00OO000000000O00 ])
        O00OO000000000O00 +=1 
        O0OO0OOO0OO0O00OO =OO0OOOO00OO000O00 |OO0000OOOO0OOOO0O 
        OO0O0000OO0O00O00 [OO000O0O0000O00O0 ]=OOO0OOOO0O0O000O0 [O0OO0OOO0OO0O00OO >>10 ]+OOO0OOOO0O0O000O0 [O0OO0OOO0OO0O00OO >>4 &0x3f ]+OOO0OOOO0O0O000O0 [int_overflow ((O0OO0OOO0OO0O00OO &0x0f )<<2 )]+'='
    return ''.join (OO0O0000OO0O00O00 )
def atob (O0O0OOOOOO000O00O ):
    O0OOO00000O00O0OO =[-1 ,-1 ,-1 ,-1 ,-1 ,-1 ,-1 ,-1 ,-1 ,-1 ,-1 ,-1 ,-1 ,-1 ,-1 ,-1 ,-1 ,-1 ,-1 ,-1 ,-1 ,-1 ,-1 ,-1 ,-1 ,-1 ,-1 ,-1 ,-1 ,-1 ,-1 ,-1 ,-1 ,-1 ,-1 ,-1 ,-1 ,-1 ,-1 ,-1 ,-1 ,-1 ,-1 ,62 ,-1 ,-1 ,-1 ,63 ,52 ,53 ,54 ,55 ,56 ,57 ,58 ,59 ,60 ,61 ,-1 ,-1 ,-1 ,-1 ,-1 ,-1 ,-1 ,0 ,1 ,2 ,3 ,4 ,5 ,6 ,7 ,8 ,9 ,10 ,11 ,12 ,13 ,14 ,15 ,16 ,17 ,18 ,19 ,20 ,21 ,22 ,23 ,24 ,25 ,-1 ,-1 ,-1 ,-1 ,-1 ,-1 ,26 ,27 ,28 ,29 ,30 ,31 ,32 ,33 ,34 ,35 ,36 ,37 ,38 ,39 ,40 ,41 ,42 ,43 ,44 ,45 ,46 ,47 ,48 ,49 ,50 ,51 ,-1 ,-1 ,-1 ,-1 ,-1 ]
    O0O0O0OO00OOOO00O =len (O0O0OOOOOO000O00O )
    if O0O0O0OO00OOOO00O %4 !=0 :return ''
    if re .findall (r'[^ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\+\/\=]',O0O0OOOOOO000O00O ):return ''
    if O0O0OOOOOO000O00O [-2 ]=='=':
        OOO0O0OO00OO0OO00 =1 
    elif O0O0OOOOOO000O00O [-1 ]=='=':
        OOO0O0OO00OO0OO00 =2 
    else :
        OOO0O0OO00OO0OO00 =0 
    O00O00O0OOO0000O0 =O0O0O0OO00OOOO00O 
    if OOO0O0OO00OO0OO00 >0 :O00O00O0OOO0000O0 -=4 
    O00O00O0OOO0000O0 =(O00O00O0OOO0000O0 >>2 )*3 +OOO0O0OO00OO0OO00 
    O00O00O0OO0OOOOO0 =['']*O00O00O0OOO0000O0 
    OOO0O00O00O0OO0O0 =O0O0OO0O0OOO0O0OO =0 
    while OOO0O00O00O0OO0O0 <O0O0O0OO00OOOO00O :
        OOO0O0O00O0O0OOOO =O0OOO00000O00O0OO [ord (O0O0OOOOOO000O00O [OOO0O00O00O0OO0O0 ])]
        OOO0O00O00O0OO0O0 +=1 
        if OOO0O0O00O0O0OOOO ==-1 :break 
        O0OOO00OOO0OOOOOO =O0OOO00000O00O0OO [ord (O0O0OOOOOO000O00O [OOO0O00O00O0OO0O0 ])]
        OOO0O00O00O0OO0O0 +=1 
        if O0OOO00OOO0OOOOOO ==-1 :break 
        O00O00O0OO0OOOOO0 [O0O0OO0O0OOO0O0OO ]=fromCharCode (int_overflow (OOO0O0O00O0O0OOOO <<2 )|((O0OOO00OOO0OOOOOO &0x30 )>>4 ))
        O0O0OO0O0OOO0O0OO +=1 
        OO0O0OOO00O0OOOO0 =O0OOO00000O00O0OO [ord (O0O0OOOOOO000O00O [OOO0O00O00O0OO0O0 ])]
        OOO0O00O00O0OO0O0 +=1 
        if OO0O0OOO00O0OOOO0 ==-1 :break 
        O00O00O0OO0OOOOO0 [O0O0OO0O0OOO0O0OO ]=fromCharCode (int_overflow ((O0OOO00OOO0OOOOOO &0x0f )<<4 )|((OO0O0OOO00O0OOOO0 &0x3c )>>2 ))
        O0O0OO0O0OOO0O0OO +=1 
        OO00OOOO0O0OOO00O =O0OOO00000O00O0OO [ord (O0O0OOOOOO000O00O [OOO0O00O00O0OO0O0 ])]
        OOO0O00O00O0OO0O0 +=1 
        if OO00OOOO0O0OOO00O ==-1 :break 
        O00O00O0OO0OOOOO0 [O0O0OO0O0OOO0O0OO ]=fromCharCode (int_overflow ((OO0O0OOO00O0OOOO0 &0x03 )<<6 )|OO00OOOO0O0OOO00O )
        O0O0OO0O0OOO0O0OO +=1 
    return ''.join (O00O00O0OO0OOOOO0 )
def toBinaryString (O000O0O0O0OOOOO0O ,OOO0O0OOOOO0000OO :bool ):
    O0OO00O00O000OOOO =len (O000O0O0O0OOOOO0O )
    O000OOOOO0O0OOO00 =int_overflow (O0OO00O00O000OOOO <<2 )
    if OOO0O0OOOOO0000OO :
        OO0OO000000O00OOO =O000O0O0O0OOOOO0O [O0OO00O00O000OOOO -1 ]
        O000OOOOO0O0OOO00 -=4 
        if OO0OO000000O00OOO <O000OOOOO0O0OOO00 -3 or OO0OO000000O00OOO >O000OOOOO0O0OOO00 :
            return None 
        O000OOOOO0O0OOO00 =OO0OO000000O00OOO 
    OOO0OO0OOOOOOO0OO =0 
    while OOO0OO0OOOOOOO0OO <O0OO00O00O000OOOO :
        O000O0O0O0OOOOO0O [OOO0OO0OOOOOOO0OO ]=fromCharCode (O000O0O0O0OOOOO0O [OOO0OO0OOOOOOO0OO ]&0xFF ,unsigned_right_shitf (O000O0O0O0OOOOO0O [OOO0OO0OOOOOOO0OO ],8 )&0xFF ,unsigned_right_shitf (O000O0O0O0OOOOO0O [OOO0OO0OOOOOOO0OO ],16 )&0xFF ,unsigned_right_shitf (O000O0O0O0OOOOO0O [OOO0OO0OOOOOOO0OO ],24 )&0xFF ,)
        OOO0OO0OOOOOOO0OO +=1 
    O0OO0OO000O00000O =''.join (O000O0O0O0OOOOO0O )
    if OOO0O0OOOOO0000OO :
        return O0OO0OO000O00000O [0 :O000OOOOO0O0OOO00 ]
    return O0OO0OO000O00000O 
def mx (OOOOOO0OO0OOOOO0O ,O0O000O0O0OO0O00O ,OO0O0O00O00O0O0O0 ,OOOO00OO0OOO00O0O ,OO00O000OOO0OOOOO ,OO0OOOOO00O00O0OO ):
    return ((unsigned_right_shitf (OO0O0O00O00O0O0O0 ,5 )^O0O000O0O0OO0O00O <<2 )+(unsigned_right_shitf (O0O000O0O0OO0O00O ,3 )^OO0O0O00O00O0O0O0 <<4 ))^((OOOOOO0OO0OOOOO0O ^O0O000O0O0OO0O00O )+(OO0OOOOO00O00O0OO [OOOO00OO0OOO00O0O &3 ^OO00O000OOO0OOOOO ]^OO0O0O00O00O0O0O0 ))
def int32 (OO0OOO00O0O0OOOOO ):
    return int_overflow (OO0OOO00O0O0OOOOO &0xFFFFFFFF )
def encryptUint32Array (O0000OOO0OO0OOO0O ,O0O0O0OO00OO00O0O ):
    O0OO000OO0OO000OO =len (O0000OOO0OO0OOO0O )
    OO00O00O0O0OO000O =O0OO000OO0OO000OO -1 
    O00O00O0000OOOO0O =O0000OOO0OO0OOO0O [OO00O00O0O0OO000O ]
    OOOO0OO00O0OOOO0O =0 
    O00OO0OO0OO0000O0 =(int (6 +52 /O0OO000OO0OO000OO )|0 )
    while O00OO0OO0OO0000O0 >0 :
        OOOO0OO00O0OOOO0O =int32 (OOOO0OO00O0OOOO0O +0o23615674671 )
        O0OOOOO0OOOO0O000 =unsigned_right_shitf (OOOO0OO00O0OOOO0O ,2 )&3 
        OO00OOOOO0OOO00O0 =0 
        while OO00OOOOO0OOO00O0 <OO00O00O0O0OO000O :
            O0O0OOOOOOO00O0OO =O0000OOO0OO0OOO0O [OO00OOOOO0OOO00O0 +1 ]
            O00O00O0000OOOO0O =O0000OOO0OO0OOO0O [OO00OOOOO0OOO00O0 ]=int32 (O0000OOO0OO0OOO0O [OO00OOOOO0OOO00O0 ]+mx (OOOO0OO00O0OOOO0O ,O0O0OOOOOOO00O0OO ,O00O00O0000OOOO0O ,OO00OOOOO0OOO00O0 ,O0OOOOO0OOOO0O000 ,O0O0O0OO00OO00O0O ))
            OO00OOOOO0OOO00O0 +=1 
        O0O0OOOOOOO00O0OO =O0000OOO0OO0OOO0O [0 ]
        O00O00O0000OOOO0O =O0000OOO0OO0OOO0O [OO00O00O0O0OO000O ]=int32 (O0000OOO0OO0OOO0O [OO00O00O0O0OO000O ]+mx (OOOO0OO00O0OOOO0O ,O0O0OOOOOOO00O0OO ,O00O00O0000OOOO0O ,OO00O00O0O0OO000O ,O0OOOOO0OOOO0O000 ,O0O0O0OO00OO00O0O ))
        O00OO0OO0OO0000O0 -=1 
    return O0000OOO0OO0OOO0O 
def decryptUint32Array (O0OOO000O00O0O000 ,O0OO000OO00O0O000 ):
    OOOOO00000OOOOO00 =len (O0OOO000O00O0O000 )
    O00OO00O0OOOOO00O =OOOOO00000OOOOO00 -1 
    O00000OOO0OO0O0OO =O0OOO000O00O0O000 [0 ]
    OOOO00OOOOOOO0O00 =int (6 +52 /OOOOO00000OOOOO00 )
    O0O00OOOOOOOO000O =int32 (OOOO00OOOOOOO0O00 *0o23615674671 )
    while O0O00OOOOOOOO000O !=0 :
        OO0O00O0OO00O000O =unsigned_right_shitf (O0O00OOOOOOOO000O ,2 )&3 
        OOO00OOOO00OOO0OO =O00OO00O0OOOOO00O 
        while OOO00OOOO00OOO0OO >0 :
            O0O0OOO0O0OOOOOO0 =O0OOO000O00O0O000 [OOO00OOOO00OOO0OO -1 ]
            O00000OOO0OO0O0OO =O0OOO000O00O0O000 [OOO00OOOO00OOO0OO ]=int32 (O0OOO000O00O0O000 [OOO00OOOO00OOO0OO ]-mx (O0O00OOOOOOOO000O ,O00000OOO0OO0O0OO ,O0O0OOO0O0OOOOOO0 ,OOO00OOOO00OOO0OO ,OO0O00O0OO00O000O ,O0OO000OO00O0O000 ))
            OOO00OOOO00OOO0OO -=1 
        O0O0OOO0O0OOOOOO0 =O0OOO000O00O0O000 [O00OO00O0OOOOO00O ]
        O00000OOO0OO0O0OO =O0OOO000O00O0O000 [0 ]=int32 (O0OOO000O00O0O000 [0 ]-mx (O0O00OOOOOOOO000O ,O00000OOO0OO0O0OO ,O0O0OOO0O0OOOOOO0 ,0 ,OO0O00O0OO00O000O ,O0OO000OO00O0O000 ))
        O0O00OOOOOOOO000O =int32 (O0O00OOOOOOOO000O -0o23615674671 )
    return O0OOO000O00O0O000 
def fixk (O00O000000O00O0O0 ):
    if len (O00O000000O00O0O0 )<4 :
        O00O000000O00O0O0 .extend ([0 ]*(4 -len (O00O000000O00O0O0 )))
    return O00O000000O00O0O0 
def toUint32Array (O0OO0O0O0OOOOOOOO ,O0OOO0O000O0000OO :bool ):
    O0O0O0O0OOOO00OOO =len (O0OO0O0O0OOOOOOOO )
    O00O0OO00000OO0O0 =O0O0O0O0OOOO00OOO >>2 
    if (O0O0O0O0OOOO00OOO &3 )!=0 :
        O00O0OO00000OO0O0 +=1 
    if O0OOO0O000O0000OO :
        OOOO00O0O0OO00000 =[0 ]*(O00O0OO00000OO0O0 +1 )
        OOOO00O0O0OO00000 [O00O0OO00000OO0O0 ]=O0O0O0O0OOOO00OOO 
    else :
        OOOO00O0O0OO00000 =[0 ]*O00O0OO00000OO0O0 
    for OO000OO0OOO000O0O in range (O0O0O0O0OOOO00OOO ):
        OOOO00O0O0OO00000 [OO000OO0OOO000O0O >>2 ]=OOOO00O0O0OO00000 [OO000OO0OOO000O0O >>2 ]|int_overflow (ord (O0OO0O0O0OOOOOOOO [OO000OO0OOO000O0O ])<<int_overflow ((OO000OO0OOO000O0O &3 )<<3 ))
    return OOOO00O0O0OO00000 
def utf8Encode (O0OO0000OO00OO00O ):
    if re .findall (r'^[\x00-\x7f]*$',O0OO0000OO00OO00O ):return O0OO0000OO00OO00O 
    O0OOOOOO0O000O000 =[None ]*len (O0OO0000OO00OO00O )
    O0O0OO0OOOOO000OO =len (O0OO0000OO00OO00O )
    OO00O0O0O00O000OO =0 
    OOO0O0O00OOO0O00O =0 
    while OO00O0O0O00O000OO <O0O0OO0OOOOO000OO :
        O0OOO0O00OO0OOO0O =ord (O0OO0000OO00OO00O [OO00O0O0O00O000OO ])
        if O0OOO0O00OO0OOO0O <0x80 :
            O0OOOOOO0O000O000 [OOO0O0O00OOO0O00O ]=O0OO0000OO00OO00O [OO00O0O0O00O000OO ]
        elif O0OOO0O00OO0OOO0O <0x800 :
            O0OOOOOO0O000O000 [OOO0O0O00OOO0O00O ]=fromCharCode (0xC0 |(O0OOO0O00OO0OOO0O >>6 ),0x80 |(O0OOO0O00OO0OOO0O &0x3F ))
        elif O0OOO0O00OO0OOO0O <0xD800 or O0OOO0O00OO0OOO0O >0xDFFF :
            O0OOOOOO0O000O000 [OOO0O0O00OOO0O00O ]=fromCharCode (0xE0 |(O0OOO0O00OO0OOO0O >>12 ),0x80 |((O0OOO0O00OO0OOO0O >>6 )&0x3F ),0x80 |(O0OOO0O00OO0OOO0O &0x3F ))
        else :
            if OO00O0O0O00O000OO +1 <O0O0OO0OOOOO000OO :
                OOOOO00O000O0OOO0 =ord (O0OO0000OO00OO00O [OO00O0O0O00O000OO +1 ])
                if O0OOO0O00OO0OOO0O <0xDC00 and 0xDC00 <=OOOOO00O000O0OOO0 and OOOOO00O000O0OOO0 <=0xDFFF :
                    OO00000OO0O0OOO00 =(((O0OOO0O00OO0OOO0O &0x03FF )<<10 )|(OOOOO00O000O0OOO0 &0x03FF ))+0x010000 
                    O0OOOOOO0O000O000 [OOO0O0O00OOO0O00O ]=fromCharCode (0xF0 |((OO00000OO0O0OOO00 >>18 )&0x3F ),0x80 |((OO00000OO0O0OOO00 >>12 )&0x3F ),0x80 |((OO00000OO0O0OOO00 >>6 )&0x3F ),0x80 |(OO00000OO0O0OOO00 &0x3F ))
                    OO00O0O0O00O000OO +=1 
        OO00O0O0O00O000OO +=1 
        OOO0O0O00OOO0O00O +=1 
    return ''.join (O0OOOOOO0O000O000 )
def utf8DecodeShortString (OOO00OO0OO0OOOOO0 ,OOO0O0OO0O00OO0OO ):
    OOOOO0000O0O00000 =[0 ]*OOO0O0OO0O00OO0OO 
    OOO0O00O0O00O0OOO =O0OOOOO00O000OO00 =0 
    OO0O0OOO00O0O0OOO =len (OOO00OO0OO0OOOOO0 )
    while OOO0O00O0O00O0OOO <OOO0O0OO0O00OO0OO and O0OOOOO00O000OO00 <OO0O0OOO00O0O0OOO :
        O00OO0000O0OOO0OO =ord (OOO00OO0OO0OOOOO0 [O0OOOOO00O000OO00 ])
        O0OOOOO00O000OO00 +=1 
        OO00OOOO0000OO0OO =O00OO0000O0OOO0OO >>4 
        if OO00OOOO0000OO0OO in [0 ,1 ,2 ,3 ,4 ,5 ,6 ,7 ]:
            OOOOO0000O0O00000 [OOO0O00O0O00O0OOO ]=O00OO0000O0OOO0OO 
        elif OO00OOOO0000OO0OO in [12 ,13 ]:
            if O0OOOOO00O000OO00 <OO0O0OOO00O0O0OOO :
                OOOOO0000O0O00000 [OOO0O00O0O00O0OOO ]=int_overflow ((O00OO0000O0OOO0OO &0x1F )<<6 )|(ord (OOO00OO0OO0OOOOO0 [O0OOOOO00O000OO00 ])&0x3F )
                O0OOOOO00O000OO00 +=1 
            else :
                Exception ('Unfinished UTF-8 octet sequence')
        elif OO00OOOO0000OO0OO in [14 ]:
            if O0OOOOO00O000OO00 +1 <OO0O0OOO00O0O0OOO :
                O0O00000O00OOOOOO =int_overflow ((ord (OOO00OO0OO0OOOOO0 [O0OOOOO00O000OO00 ])&0x3F )<<6 )
                O0OOOOO00O000OO00 +=1 
                O0000O0O0OO0OOO0O =ord (OOO00OO0OO0OOOOO0 [O0OOOOO00O000OO00 ])&0x3F 
                O0OOOOO00O000OO00 +=1 
                OOOOO0000O0O00000 [OOO0O00O0O00O0OOO ]=int_overflow ((O00OO0000O0OOO0OO &0x0F )<<12 )|O0O00000O00OOOOOO |O0000O0O0OO0OOO0O 
            else :
                Exception ('Unfinished UTF-8 octet sequence')
        elif OO00OOOO0000OO0OO in [15 ]:
            if O0OOOOO00O000OO00 +2 <OO0O0OOO00O0O0OOO :
                O0O00000O00OOOOOO =int_overflow ((ord (OOO00OO0OO0OOOOO0 [O0OOOOO00O000OO00 ])&0x3F )<<12 )
                O0OOOOO00O000OO00 +=1 
                O0000O0O0OO0OOO0O =int_overflow ((ord (OOO00OO0OO0OOOOO0 [O0OOOOO00O000OO00 ])&0x3F )<<6 )
                O0OOOOO00O000OO00 +=1 
                OO00OOO0OO0O0O0OO =(ord (OOO00OO0OO0OOOOO0 [O0OOOOO00O000OO00 ])&0x3F )
                O0OOOOO00O000OO00 +=1 
                O0O00OOO000O00OO0 =(int_overflow ((O00OO0000O0OOO0OO &0x07 )<<18 )|O0O00000O00OOOOOO |O0000O0O0OO0OOO0O |OO00OOO0OO0O0O0OO )-0x10000 
                if 0 <=O0O00OOO000O00OO0 and O0O00OOO000O00OO0 <=0xFFFFF :
                    OOOOO0000O0O00000 [OOO0O00O0O00O0OOO ]=(((O0O00OOO000O00OO0 >>10 )&0x03FF )|0xD800 )
                    OOO0O00O0O00O0OOO +=1 
                    OOOOO0000O0O00000 [OOO0O00O0O00O0OOO ]=(O0O00OOO000O00OO0 &0x03FF )|0xDC00 
                else :
                    Exception ('Character outside valid Unicode')
            else :
                Exception ('Unfinished UTF-8 octet sequence')
        else :
            Exception ('Bad UTF-8 encoding')
        OOO0O00O0O00O0OOO +=1 
    if OOO0O00O0O00O0OOO <OOO0O0OO0O00OO0OO :
        OOOOO0000O0O00000 =OOOOO0000O0O00000 [:OOO0O00O0O00O0OOO ]
    return fromCharCode (*OOOOO0000O0O00000 )
def utf8DecodeLongString (O0OO00O0OOO0O00O0 ,O0O0O0OOO00OO0O0O ):
    OOOO0000O0OOO000O =[]
    OOOOO00OO000OO0OO =[0 ]*0x8000 
    O0O00OOO0O0O00O00 =OO00O00O0O00000OO =0 
    OOO0OOO0OO000OOO0 =len (O0OO00O0OOO0O00O0 )
    while O0O00OOO0O0O00O00 <O0O0O0OOO00OO0O0O and OO00O00O0O00000OO <OOO0OOO0OO000OOO0 :
        O0OOOOO00OO0O0OO0 =ord (O0OO00O0OOO0O00O0 [OO00O00O0O00000OO ])
        OO00O00O0O00000OO +=1 
        O0000O00O0OOO0O0O =O0OOOOO00OO0O0OO0 >>4 
        if O0000O00O0OOO0O0O in [0 ,1 ,2 ,3 ,4 ,5 ,6 ,7 ]:
            OOOOO00OO000OO0OO [O0O00OOO0O0O00O00 ]=O0OOOOO00OO0O0OO0 
        elif O0000O00O0OOO0O0O in [12 ,13 ]:
            if OO00O00O0O00000OO <OOO0OOO0OO000OOO0 :
                OOOOO00OO000OO0OO [O0O00OOO0O0O00O00 ]=int_overflow ((O0OOOOO00OO0O0OO0 &0x1F )<<6 )|(ord (O0OO00O0OOO0O00O0 [OO00O00O0O00000OO ])&0x3F )
                OO00O00O0O00000OO +=1 
            else :
                Exception ('Unfinished UTF-8 octet sequence')
        elif O0000O00O0OOO0O0O in [14 ]:
            if OO00O00O0O00000OO +1 <OOO0OOO0OO000OOO0 :
                OOO00O000O0OO0O00 =int_overflow ((ord (O0OO00O0OOO0O00O0 [OO00O00O0O00000OO ])&0x3F )<<6 )
                OO00O00O0O00000OO +=1 
                OO0000OOOOO00000O =ord (O0OO00O0OOO0O00O0 [OO00O00O0O00000OO ])&0x3F 
                OO00O00O0O00000OO +=1 
                OOOOO00OO000OO0OO [O0O00OOO0O0O00O00 ]=int_overflow ((O0OOOOO00OO0O0OO0 &0x0F )<<12 )|OOO00O000O0OO0O00 |OO0000OOOOO00000O 
            else :
                Exception ('Unfinished UTF-8 octet sequence')
        elif O0000O00O0OOO0O0O in [15 ]:
            if OO00O00O0O00000OO +2 <OOO0OOO0OO000OOO0 :
                OOO00O000O0OO0O00 =int_overflow ((ord (O0OO00O0OOO0O00O0 [OO00O00O0O00000OO ])&0x3F )<<12 )
                OO00O00O0O00000OO +=1 
                OO0000OOOOO00000O =int_overflow ((ord (O0OO00O0OOO0O00O0 [OO00O00O0O00000OO ])&0x3F )<<6 )
                OO00O00O0O00000OO +=1 
                OOO00OO00OOOOO000 =ord (O0OO00O0OOO0O00O0 [OO00O00O0O00000OO ])&0x3F 
                OO00O00O0O00000OO +=1 
                O0000OO00O0OOO0O0 =(int_overflow ((O0OOOOO00OO0O0OO0 &0x07 )<<18 )|OOO00O000O0OO0O00 |OO0000OOOOO00000O |OOO00OO00OOOOO000 )-0x10000 
                if 0 <=O0000OO00O0OOO0O0 and O0000OO00O0OOO0O0 <=0xFFFFF :
                    OOOOO00OO000OO0OO [O0O00OOO0O0O00O00 ]=(((O0000OO00O0OOO0O0 >>100 )&0x03FF )|0xD800 )
                    O0O00OOO0O0O00O00 +=1 
                    OOOOO00OO000OO0OO [O0O00OOO0O0O00O00 ]=((O0000OO00O0OOO0O0 &0x03FF )|0xDC00 )
                else :
                    Exception ('Character outside valid Unicode')
            else :
                Exception ('Unfinished UTF-8 octet sequence')
        else :
            Exception ('Bad UTF-8 encoding')
        if O0O00OOO0O0O00O00 >=0x7FFF -1 :
            O0000OOO0O0OO00OO =O0O00OOO0O0O00O00 +1 
            if len (OOOOO00OO000OO0OO )>O0000OOO0O0OO00OO :
                OOOOO00OO000OO0OO =OOOOO00OO000OO0OO [:O0000OOO0O0OO00OO ]
            else :
                OOOOO00OO000OO0OO .extend ([0 ]*(O0000OOO0O0OO00OO -len (OOOOO00OO000OO0OO )))
            OOOOO00OO000OO0OO .append (fromCharCode (*OOOOO00OO000OO0OO ))
            O0O0O0OOO00OO0O0O -=O0000OOO0O0OO00OO 
            O0O00OOO0O0O00O00 =-1 
        O0O00OOO0O0O00O00 +=1 
    if O0O00OOO0O0O00O00 >0 :
        OOOOO00OO000OO0OO =OOOOO00OO000OO0OO [:O0O00OOO0O0O00O00 ]
        OOOO0000O0OOO000O .append (fromCharCode (*OOOOO00OO000OO0OO ))
    return ''.join (OOOO0000O0OOO000O )
def utf8Decode (O000O00OO0OO0O0O0 ,O0OO0OO0000O0O0OO =None ):
    if not O0OO0OO0000O0O0OO or O0OO0OO0000O0O0OO <0 :O0OO0OO0000O0O0OO =len (O000O00OO0OO0O0O0 )
    if O0OO0OO0000O0O0OO ==0 :return ''
    if re .findall (r'^[\x00-\x7f]*$',O000O00OO0OO0O0O0 )or not re .findall (r'^[\x00-\xff]*$',O000O00OO0OO0O0O0 ):
        if O0OO0OO0000O0O0OO ==len (O000O00OO0OO0O0O0 ):return O000O00OO0OO0O0O0 
        return O000O00OO0OO0O0O0 [0 :O0OO0OO0000O0O0OO ]
    return utf8DecodeShortString (O000O00OO0OO0O0O0 ,O0OO0OO0000O0O0OO )if O0OO0OO0000O0O0OO <0x7FFF else utf8DecodeLongString (O000O00OO0OO0O0O0 ,O0OO0OO0000O0O0OO )
def encrypt (OOOO000OOO0O000OO ,OO0OOO00OO000OOOO ):
    if not OOOO000OOO0O000OO or len (OOOO000OOO0O000OO )==0 :return OOOO000OOO0O000OO 
    OOOO000OOO0O000OO =utf8Encode (OOOO000OOO0O000OO )
    OO0OOO00OO000OOOO =utf8Encode (OO0OOO00OO000OOOO )
    return toBinaryString (encryptUint32Array (toUint32Array (OOOO000OOO0O000OO ,True ),fixk (toUint32Array (OO0OOO00OO000OOOO ,False ))),False )
def decrypt (OO0O00O0OO000O0OO ,O00000O00000OOO0O ):
    if not OO0O00O0OO000O0OO or len (OO0O00O0OO000O0OO )==0 :
        return OO0O00O0OO000O0OO 
    O00000O00000OOO0O =utf8Encode (O00000O00000OOO0O )
    return utf8Decode (toBinaryString (decryptUint32Array (toUint32Array (OO0O00O0OO000O0OO ,False ),fixk (toUint32Array (O00000O00000OOO0O ,False ))),True ))
def decryptFromBase64 (OOOOOO00O0000O0OO ,O00OO000OO000000O ):
    if not OOOOOO00O0000O0OO or len (OOOOOO00O0000O0OO )==0 :
        return OOOOOO00O0000O0OO 
    return decrypt (atob (OOOOOO00O0000O0OO ),O00OO000OO000000O )
def encryptToBase64 (OO0000000OO0OO0O0 ,O000000O00OO000O0 ):
    return btoa (encrypt (OO0000000OO0OO0O0 ,O000000O00OO000O0 ))
